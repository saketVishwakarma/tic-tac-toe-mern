name: terraform setup -plan, apply, and destroy

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'enter "plan", "apply", or "destroy"'
        required: true
        default: ''
        type : choice
        options: ['plan', 'apply', 'destroy']
      confirm_destroy:
        description: 'confirm destroy action (type "yes")'
        required: false
        default: ''
        type: string
permissions:
  id-token: write
  contents: read

jobs:
  plan-apply-destroy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
   

    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/tictactoe


    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v2
      - name : Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Terraform Init
        run: |
          terraform init
          ls
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
            terraform plan -var="location=${{ secrets.TF_LOCATION }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID}}" -var="resource_group_name=${{ secrets.TF_RESOURCENAME }}" -var="app_name=${{ secrets.TF_APPNAME }}" -var="dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}" -var="client_id=${{ secrets.AZURE_CLIENT_ID}}" -out=tfplan
            ls
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'yes' }}
        run: terraform destroy -auto-approve  
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Terraform Plan JSON and infracost report
        run: | 
            terraform plan -var="location=${{ secrets.TF_LOCATION }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID}}" -var="resource_group_name=${{ secrets.TF_RESOURCENAME }}" -var="app_name=${{ secrets.TF_APPNAME }}" -var="dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}" -var="client_id=${{ secrets.AZURE_CLIENT_ID}}" -out=tfplan.binary
            terraform show -json tfplan.binary > plan.json
            infracost breakdown --path plan.json --format html --out-file infracost-report.html
            echo "Generated Infracost Report:"
            ls -lh infracost-report.html
            ls
        env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_USE_OIDC: true
      - name: Upload Infracost Report
        uses: actions/upload-artifact@v4
        with:
          name: infracost-report
          path: infracost-report.html
      - name: Install Checkov
        run: pip install checkov

      - name: Scan Terraform plan with Checkov
        run: |
          terraform plan -var="location=${{ secrets.TF_LOCATION }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID}}" -var="resource_group_name=${{ secrets.TF_RESOURCENAME }}" -var="app_name=${{ secrets.TF_APPNAME }}" -var="dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}" -var="client_id=${{ secrets.AZURE_CLIENT_ID}}" -out=tfplan.binary
          terraform show -json tfplan.binary > tfplan.json
          checkov -f tfplan.json --framework terraform_plan --output json > checkov-plan-report.json
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Upload Checkov Report
        uses: actions/upload-artifact@v4
        with:
            name: checkov-plan-report
            path: checkov-plan-report.json


      
